###*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*
###*  CLASS input parameter file  *
###*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*


###############################
###############################
##   delensing parameters    ##
########\\########//###########
#########\\######//############
##########\\####//#############
###########\\##//##############
############\\//###############


###########\\##//##############
###### New options for delensing implementation
############\\//###############

###############################
## if delensing = yes : performs delensing once
## if delensing = iterative : performs iterative delensing until spectra converge 
###############################
delensing = yes

##
## note you have to add the below CLASS options to calculate delensing accurately (note the dlCl option added for calculating the delensed spectra)
##
output = tCl,pCl,lCl,dlCl
accurate_lensing = 1
modes = s
lensing = yes
##
## ...and choose sufficiently large numbers for 
##
## Was 5000
l_max_scalars = 3000
delta_l_max = 1000
### note: for reference, accurate delensing requires delta_l_max > 1500 when l_max = 5000.

###########\\##//##############
###### Selecting CMB noise
############\\//###############
##
## temperature noise spectra type = idealized: Calculates the idealized temperature
##																						 noise with parameters sigma_beam
##																						 and delta_noise.
## temperature noise spectra type = idealized: The same as above, for polarization.
##
## noise spectra type = external: Takes the noise spectra from external file given by e.g.
## command_for_temperature_noise_spec  = cat noise_power_T_tempSpectra_0.txt
## command_for_polarization_noise_spec = cat noise_power_P_tempSpectra_0.txt
##
temperature noise spectra type  = idealized
polarization noise spectra type = idealized
##
## properties of the temperature and polarization noise in radians
##
delta_noise = 0.000290888209
sigma_beam  = 0.000290888209
##
## if we wish to output the temperature/polarization spectra.
##
output_spectra_noise = yes

###########\\##//##############
###### Options for lensing-reconstruction noise calculation
############\\//###############
##
## lensing reconstruction noise spectra type = internal: calculating lensing noise reconstruction
##																											 from internal estimators we added to CLASS.
## noise spectra type = external: takes the noise spectra from external file given by e.g.
## command_for_lens_recon_noise_spec = cat noise_power_defl_tempSpectra_0.txt
##
lensing reconstruction noise spectra type = internal
##
## if delensing = iterative : then desicde which set quadratic estimators you wish to iterative over.
##
## 'all'  =  iterative on all quadratic estimators 
## 'diag' =  iterative on only the diagonal elements in the quadratic-estimator covariance matrix
## 'eb'   =  iterative on only the EB-EB quadratic estimator
## note: 'diag' and 'eb' options are stable,
## 		   'all' should be OK but will see further optimisation in the next weeks.
##
noise_iteration_type = diag
##
## if delensing = iterative : set the type of the minimum-varriance lensing-reconstruction noise calculation
##
## min_varr_type = all   :  calculate the minimum-variance lensing-reconstruction noise using all quadratic estimators
## min_varr_type = diag  :  using only the diagonal elements in the lensing-noise reconstruction weigths matrix
## min_varr_type = eb    :  using only the EB-weigthed lensing noise estimate.
## note: 'diag' and 'eb' options are stable,
## 		   'all' should be OK but will see further optimisation in the next weeks.
##
min_varr_type = diag
##
## if delensing = iterative : set the type of the convergence criteria
##
## if convergence type = every : convergence if only the fractional difference between the amplitudes of the 
##                               minimum-variance lensing-reconstruction noise spectra at *every* \ell for the 
##                               current and the previous iteration converges to 'convergence_criterion_itr'
##                              
## if convergence type = total : convergence if only the *sum* of all the fractional differences between the 
##                               current and the previous iteration of the minimum-variance lensing-reconstruction 
##                               noise spectra amplitudes is less than 'convergence_criterion_itr'
##
convergence type = total
##
## also, dont forget to choose
## e.g.
convergence_criterion_itr = 1e-4
##

###########\\##//##############
###### Options for derivatives of the lensed or delensed spectra
############\\//###############
##
calculate_derviaties_wrt_unlensed = yes  ## if yes, code calculates the derivatives of the lensed or delensed spectra w.r.t. unlensed spectra
unlensed derivative type = lensed    ## choose the type of the derivative (either 'lensed' or 'delensed')
##
## 
delensing derivatives = yes ## if yes, code calculates the derivatives of the lensed or delensed spectra w.r.t. lensing potential
## 
derivative type = lensed ## choose the type of the derivative (either 'lensed' or 'delensed')
##
##
## are you going to output the derivatives?
##
output_derivatives = yes
##

###########\\##//##############
###### Options for derivatives of the lensed or delensed spectra
############\\//###############
##
## The derivative matrices can be large (Lxl) where L is the multipoles corresponding to derivatives and l is the multipoles of the numerator
## you can choose a sparse sampling between the L's. 
## e.g. for printing every 10th dCl^TT/dCL^dd in L:
## set:
derv_binedges = 10
## note code still prints all l elements.


###########\\##//##############
###### Miscellaneous options
############\\//###############
##
## note: at the moment delensing verbose serves more for debugging.
delensing_verbose = 3
##
## buffer between the lensed spectra and delensed spectra (unused at the moment)
##
delta_dl_max = 0
##

## otherwise use the standard CLASS options described in explainatory.ini

###############################
##  cosmological parameters  ##
###############################
H0 = 67.5
omega_b = 0.0222
omega_cdm = 0.1197
N_ur = 3.046
A_s = 2.196e-9
n_s = 0.9655
tau_reio = 0.06
m_ncdm: 0.06
###############################
## other relevant parameters ##
###############################
non linear = halofit
headers = yes
write parameters = yes



